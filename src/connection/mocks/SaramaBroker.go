// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	sarama "github.com/Shopify/sarama"
	mock "github.com/stretchr/testify/mock"
)

// SaramaBroker is an autogenerated mock type for the SaramaBroker type
type SaramaBroker struct {
	mock.Mock
}

// AddOffsetsToTxn provides a mock function with given fields: request
func (_m *SaramaBroker) AddOffsetsToTxn(request *sarama.AddOffsetsToTxnRequest) (*sarama.AddOffsetsToTxnResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.AddOffsetsToTxnResponse
	if rf, ok := ret.Get(0).(func(*sarama.AddOffsetsToTxnRequest) *sarama.AddOffsetsToTxnResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.AddOffsetsToTxnResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.AddOffsetsToTxnRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPartitionsToTxn provides a mock function with given fields: request
func (_m *SaramaBroker) AddPartitionsToTxn(request *sarama.AddPartitionsToTxnRequest) (*sarama.AddPartitionsToTxnResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.AddPartitionsToTxnResponse
	if rf, ok := ret.Get(0).(func(*sarama.AddPartitionsToTxnRequest) *sarama.AddPartitionsToTxnResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.AddPartitionsToTxnResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.AddPartitionsToTxnRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Addr provides a mock function with given fields:
func (_m *SaramaBroker) Addr() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AlterConfigs provides a mock function with given fields: request
func (_m *SaramaBroker) AlterConfigs(request *sarama.AlterConfigsRequest) (*sarama.AlterConfigsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.AlterConfigsResponse
	if rf, ok := ret.Get(0).(func(*sarama.AlterConfigsRequest) *sarama.AlterConfigsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.AlterConfigsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.AlterConfigsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApiVersions provides a mock function with given fields: request
func (_m *SaramaBroker) ApiVersions(request *sarama.ApiVersionsRequest) (*sarama.ApiVersionsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.ApiVersionsResponse
	if rf, ok := ret.Get(0).(func(*sarama.ApiVersionsRequest) *sarama.ApiVersionsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.ApiVersionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.ApiVersionsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *SaramaBroker) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitOffset provides a mock function with given fields: request
func (_m *SaramaBroker) CommitOffset(request *sarama.OffsetCommitRequest) (*sarama.OffsetCommitResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.OffsetCommitResponse
	if rf, ok := ret.Get(0).(func(*sarama.OffsetCommitRequest) *sarama.OffsetCommitResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.OffsetCommitResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.OffsetCommitRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connected provides a mock function with given fields:
func (_m *SaramaBroker) Connected() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAcls provides a mock function with given fields: request
func (_m *SaramaBroker) CreateAcls(request *sarama.CreateAclsRequest) (*sarama.CreateAclsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.CreateAclsResponse
	if rf, ok := ret.Get(0).(func(*sarama.CreateAclsRequest) *sarama.CreateAclsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.CreateAclsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.CreateAclsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartitions provides a mock function with given fields: request
func (_m *SaramaBroker) CreatePartitions(request *sarama.CreatePartitionsRequest) (*sarama.CreatePartitionsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.CreatePartitionsResponse
	if rf, ok := ret.Get(0).(func(*sarama.CreatePartitionsRequest) *sarama.CreatePartitionsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.CreatePartitionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.CreatePartitionsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopics provides a mock function with given fields: request
func (_m *SaramaBroker) CreateTopics(request *sarama.CreateTopicsRequest) (*sarama.CreateTopicsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.CreateTopicsResponse
	if rf, ok := ret.Get(0).(func(*sarama.CreateTopicsRequest) *sarama.CreateTopicsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.CreateTopicsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.CreateTopicsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAcls provides a mock function with given fields: request
func (_m *SaramaBroker) DeleteAcls(request *sarama.DeleteAclsRequest) (*sarama.DeleteAclsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.DeleteAclsResponse
	if rf, ok := ret.Get(0).(func(*sarama.DeleteAclsRequest) *sarama.DeleteAclsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.DeleteAclsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.DeleteAclsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroups provides a mock function with given fields: request
func (_m *SaramaBroker) DeleteGroups(request *sarama.DeleteGroupsRequest) (*sarama.DeleteGroupsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.DeleteGroupsResponse
	if rf, ok := ret.Get(0).(func(*sarama.DeleteGroupsRequest) *sarama.DeleteGroupsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.DeleteGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.DeleteGroupsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecords provides a mock function with given fields: request
func (_m *SaramaBroker) DeleteRecords(request *sarama.DeleteRecordsRequest) (*sarama.DeleteRecordsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.DeleteRecordsResponse
	if rf, ok := ret.Get(0).(func(*sarama.DeleteRecordsRequest) *sarama.DeleteRecordsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.DeleteRecordsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.DeleteRecordsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopics provides a mock function with given fields: request
func (_m *SaramaBroker) DeleteTopics(request *sarama.DeleteTopicsRequest) (*sarama.DeleteTopicsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.DeleteTopicsResponse
	if rf, ok := ret.Get(0).(func(*sarama.DeleteTopicsRequest) *sarama.DeleteTopicsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.DeleteTopicsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.DeleteTopicsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAcls provides a mock function with given fields: request
func (_m *SaramaBroker) DescribeAcls(request *sarama.DescribeAclsRequest) (*sarama.DescribeAclsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.DescribeAclsResponse
	if rf, ok := ret.Get(0).(func(*sarama.DescribeAclsRequest) *sarama.DescribeAclsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.DescribeAclsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.DescribeAclsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigs provides a mock function with given fields: request
func (_m *SaramaBroker) DescribeConfigs(request *sarama.DescribeConfigsRequest) (*sarama.DescribeConfigsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.DescribeConfigsResponse
	if rf, ok := ret.Get(0).(func(*sarama.DescribeConfigsRequest) *sarama.DescribeConfigsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.DescribeConfigsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.DescribeConfigsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGroups provides a mock function with given fields: request
func (_m *SaramaBroker) DescribeGroups(request *sarama.DescribeGroupsRequest) (*sarama.DescribeGroupsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.DescribeGroupsResponse
	if rf, ok := ret.Get(0).(func(*sarama.DescribeGroupsRequest) *sarama.DescribeGroupsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.DescribeGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.DescribeGroupsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndTxn provides a mock function with given fields: request
func (_m *SaramaBroker) EndTxn(request *sarama.EndTxnRequest) (*sarama.EndTxnResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.EndTxnResponse
	if rf, ok := ret.Get(0).(func(*sarama.EndTxnRequest) *sarama.EndTxnResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.EndTxnResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.EndTxnRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: request
func (_m *SaramaBroker) Fetch(request *sarama.FetchRequest) (*sarama.FetchResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.FetchResponse
	if rf, ok := ret.Get(0).(func(*sarama.FetchRequest) *sarama.FetchResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.FetchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.FetchRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOffset provides a mock function with given fields: request
func (_m *SaramaBroker) FetchOffset(request *sarama.OffsetFetchRequest) (*sarama.OffsetFetchResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.OffsetFetchResponse
	if rf, ok := ret.Get(0).(func(*sarama.OffsetFetchRequest) *sarama.OffsetFetchResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.OffsetFetchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.OffsetFetchRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCoordinator provides a mock function with given fields: request
func (_m *SaramaBroker) FindCoordinator(request *sarama.FindCoordinatorRequest) (*sarama.FindCoordinatorResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.FindCoordinatorResponse
	if rf, ok := ret.Get(0).(func(*sarama.FindCoordinatorRequest) *sarama.FindCoordinatorResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.FindCoordinatorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.FindCoordinatorRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableOffsets provides a mock function with given fields: request
func (_m *SaramaBroker) GetAvailableOffsets(request *sarama.OffsetRequest) (*sarama.OffsetResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.OffsetResponse
	if rf, ok := ret.Get(0).(func(*sarama.OffsetRequest) *sarama.OffsetResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.OffsetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.OffsetRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsumerMetadata provides a mock function with given fields: request
func (_m *SaramaBroker) GetConsumerMetadata(request *sarama.ConsumerMetadataRequest) (*sarama.ConsumerMetadataResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.ConsumerMetadataResponse
	if rf, ok := ret.Get(0).(func(*sarama.ConsumerMetadataRequest) *sarama.ConsumerMetadataResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.ConsumerMetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.ConsumerMetadataRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadata provides a mock function with given fields: request
func (_m *SaramaBroker) GetMetadata(request *sarama.MetadataRequest) (*sarama.MetadataResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.MetadataResponse
	if rf, ok := ret.Get(0).(func(*sarama.MetadataRequest) *sarama.MetadataResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.MetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.MetadataRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Heartbeat provides a mock function with given fields: request
func (_m *SaramaBroker) Heartbeat(request *sarama.HeartbeatRequest) (*sarama.HeartbeatResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.HeartbeatResponse
	if rf, ok := ret.Get(0).(func(*sarama.HeartbeatRequest) *sarama.HeartbeatResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.HeartbeatResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.HeartbeatRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *SaramaBroker) ID() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// InitProducerID provides a mock function with given fields: request
func (_m *SaramaBroker) InitProducerID(request *sarama.InitProducerIDRequest) (*sarama.InitProducerIDResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.InitProducerIDResponse
	if rf, ok := ret.Get(0).(func(*sarama.InitProducerIDRequest) *sarama.InitProducerIDResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.InitProducerIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.InitProducerIDRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinGroup provides a mock function with given fields: request
func (_m *SaramaBroker) JoinGroup(request *sarama.JoinGroupRequest) (*sarama.JoinGroupResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.JoinGroupResponse
	if rf, ok := ret.Get(0).(func(*sarama.JoinGroupRequest) *sarama.JoinGroupResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.JoinGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.JoinGroupRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaveGroup provides a mock function with given fields: request
func (_m *SaramaBroker) LeaveGroup(request *sarama.LeaveGroupRequest) (*sarama.LeaveGroupResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.LeaveGroupResponse
	if rf, ok := ret.Get(0).(func(*sarama.LeaveGroupRequest) *sarama.LeaveGroupResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.LeaveGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.LeaveGroupRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: request
func (_m *SaramaBroker) ListGroups(request *sarama.ListGroupsRequest) (*sarama.ListGroupsResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.ListGroupsResponse
	if rf, ok := ret.Get(0).(func(*sarama.ListGroupsRequest) *sarama.ListGroupsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.ListGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.ListGroupsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: conf
func (_m *SaramaBroker) Open(conf *sarama.Config) error {
	ret := _m.Called(conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sarama.Config) error); ok {
		r0 = rf(conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Produce provides a mock function with given fields: request
func (_m *SaramaBroker) Produce(request *sarama.ProduceRequest) (*sarama.ProduceResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.ProduceResponse
	if rf, ok := ret.Get(0).(func(*sarama.ProduceRequest) *sarama.ProduceResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.ProduceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.ProduceRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rack provides a mock function with given fields:
func (_m *SaramaBroker) Rack() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SyncGroup provides a mock function with given fields: request
func (_m *SaramaBroker) SyncGroup(request *sarama.SyncGroupRequest) (*sarama.SyncGroupResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.SyncGroupResponse
	if rf, ok := ret.Get(0).(func(*sarama.SyncGroupRequest) *sarama.SyncGroupResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.SyncGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.SyncGroupRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxnOffsetCommit provides a mock function with given fields: request
func (_m *SaramaBroker) TxnOffsetCommit(request *sarama.TxnOffsetCommitRequest) (*sarama.TxnOffsetCommitResponse, error) {
	ret := _m.Called(request)

	var r0 *sarama.TxnOffsetCommitResponse
	if rf, ok := ret.Get(0).(func(*sarama.TxnOffsetCommitRequest) *sarama.TxnOffsetCommitResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.TxnOffsetCommitResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sarama.TxnOffsetCommitRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
